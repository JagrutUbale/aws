{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Creates a VPC in two availability zones. Launches an Elastic Beanstalk environment.",

  "Parameters" : {

    "aTestInstanceType" : {
        "Type"                          : "String",
        "Default"                       : "m1.medium",
        "Description"                   : "Test instance type",
        "AllowedValues"                 : [ "t1.micro", "m1.medium", "m1.large" ],
        "ConstraintDescription"         : "Choose a t1.micro, m1.medium or m1.large instance type."
    },
    "bUserKeys" : {
        "Type"                          : "AWS::EC2::KeyPair::KeyName",
        "Description"                   : "Test instance SSH PEM key name."
    },
    "cSSHFrom" : {
        "Type"                          : "String",
        "Default"                       : "192.150.10.0/24",
        "Description"                   : "SSH access to the test host",
        "AllowedPattern"                : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"         : "Please enter a valid CIDR range of the form x.x.x.x/x."
    },
    "dASGInstanceType" : {
        "Type"                          : "String",
        "Default"                       : "t1.micro",
        "Description"                   : "ASG instance type",
        "AllowedValues"                 : [ "t1.micro", "m1.medium", "m1.large", "m1.xlarge" ],
        "ConstraintDescription"         : "Choose a t1.micro, m1.medium, m1.large or m1.xlarge instance type."
    },
    "eUserKeys" : {
        "Type"                          : "AWS::EC2::KeyPair::KeyName",
        "Description"                   : "ASG instance SSH PEM key name."
    },
    "fMaxSize" : {
        "Type"                          : "Number",
        "Default"                       : "8",
        "Description"                   : "Maximum size of the autoscale group."
    },
    "gMinSize" : {
        "Type"                          : "Number",
        "Default"                       : "2",
        "Description"                   : "Minimum size of the autoscale group."
    },
    "hScalingAdjUp" : {
        "Type"                          : "Number",
        "Default"                       : "2",
        "Description"                   : "Number of instances by which to scale up."
    },
    "iScalingAdjDn" : {
        "Type"                          : "Number",
        "Default"                       : "-2",
        "Description"                   : "Number of instances by which to scale down."
    }
  },

  "Mappings" : {

    "SubnetConfig" : {
        "VPC"                           : { "CIDR" : "10.10.0.0/22" },
        "Public1"                       : { "CIDR" : "10.10.0.0/24" },
        "Public2"                       : { "CIDR" : "10.10.1.0/24" },
        "Private1"                      : { "CIDR" : "10.10.2.0/24" },
        "Private2"                      : { "CIDR" : "10.10.3.0/24" }
    },
    "RegionLinuxAMI" : {
        "us-east-1"                     : { "PV" : "ami-8e682ce6" },
        "eu-west-1"                     : { "PV" : "ami-7b3db00c" },
        "ap-northeast-1"                : { "PV" : "ami-3c87993d" },
        "us-west-1"                     : { "PV" : "ami-f49089b1" },
        "us-west-2"                     : { "PV" : "ami-9fc29baf" },
        "ap-southeast-1"                : { "PV" : "ami-58ba910a" },
        "ap-southeast-2"                : { "PV" : "ami-1500742f" },
        "sa-east-1"                     : { "PV" : "ami-fd9925e0" },
        "eu-central-1"                  : { "PV" : "ami-0600331b" }
    },
    "RegionNATAMI" : {
        "us-east-1"                     : { "HVM" : "ami-4c9e4b24" },
        "eu-west-1"                     : { "HVM" : "ami-3760b040" },
        "ap-northeast-1"                : { "HVM" : "ami-55c29e54" },
        "us-west-1"                     : { "HVM" : "ami-2b2b296e" },
        "us-west-2"                     : { "HVM" : "ami-bb69128b" },
        "ap-southeast-1"                : { "HVM" : "ami-b082dae2" },
        "ap-southeast-2"                : { "HVM" : "ami-996402a3" },
        "sa-east-1"                     : { "HVM" : "ami-b972dba4" },
        "eu-central-1"                  : { "HVM" : "ami-204c7a3d" }
    }
  },

  "Resources" : {

    "ec2VPC" : {
      "Type" : "AWS::EC2::VPC",
        "Properties" : {
          "CidrBlock"                   : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] },
          "EnableDnsSupport"            : "true",
          "EnableDnsHostnames"          : "true",
          "InstanceTenancy"             :"default",
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2InternetGW" : {
      "Type" : "AWS::EC2::InternetGateway",
        "Properties" : {
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "InternetGatewayId"           : { "Ref" : "ec2InternetGW" }
      }
    },

    "ec2Public1SubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Fn::FindInMap" : [ "SubnetConfig", "Public1", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"                : [ "0", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "ec2Public1SubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Fn::FindInMap" : [ "SubnetConfig", "Public2", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"                : [ "1", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2Private1SubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Fn::FindInMap" : [ "SubnetConfig", "Private1", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"                : [ "0", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "ec2Private1SubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Fn::FindInMap" : [ "SubnetConfig", "Private2", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"                : [ "1", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2Public1RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "ec2Private1RouteTableAZ1" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "ec2Private1RouteTableAZ2" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2InternetRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "ec2Public1RouteTable", "ec2InternetGW" ],
        "Properties" : {
          "RouteTableId"                : { "Ref" : "ec2Public1RouteTable" },
          "DestinationCidrBlock"        : "0.0.0.0/0",
          "GatewayId"                   : { "Ref" : "ec2InternetGW" }
        }
    },
    "ec2Pri1NATRouteAZ1" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "ec2Private1RouteTableAZ1", "ec2NATInstanceAZ1" ],
        "Properties" : {
          "RouteTableId"                : { "Ref" : "ec2Private1RouteTableAZ1" },
          "DestinationCidrBlock"        : "0.0.0.0/0",
          "InstanceId"                   : { "Ref" : "ec2NATInstanceAZ1" }
      }
    },
    "ec2Pri1NATRouteAZ2" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "ec2Private1RouteTableAZ2", "ec2NATInstanceAZ2" ],
        "Properties" : {
          "RouteTableId"                : { "Ref" : "ec2Private1RouteTableAZ2" },
          "DestinationCidrBlock"        : "0.0.0.0/0",
          "InstanceId"                   : { "Ref" : "ec2NATInstanceAZ2" }
      }
    },

    "ec2Public1SubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Public1SubnetAZ1" },
          "RouteTableId"                : { "Ref" : "ec2Public1RouteTable" }
      }
    },
    "ec2Public1SubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId"                      : { "Ref" : "ec2Public1SubnetAZ2" },
        "RouteTableId"                  : { "Ref" : "ec2Public1RouteTable" }
      }
    },
    "ec2Private1SubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Private1SubnetAZ1" },
          "RouteTableId"                : { "Ref" : "ec2Private1RouteTableAZ1" }
      }
    },
    "ec2Private1SubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId"                      : { "Ref" : "ec2Private1SubnetAZ2" },
        "RouteTableId"                  : { "Ref" : "ec2Private1RouteTableAZ2" }
      }
    },

    "ec2Public1SubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2Public1SubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "DependsOn" : [ "ec2Public1SubnetNetworkAcl" ],
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2Public1SubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2Public1SubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "DependsOn" : [ "ec2Public1SubnetNetworkAcl" ],
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2Public1SubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },

    "ec2Public1SubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn" : [ "ec2Public1SubnetNetworkAcl" ],
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Public1SubnetAZ1" },
          "NetworkAclId"                : { "Ref" : "ec2Public1SubnetNetworkAcl" }
      }
    },
    "ec2Public1SubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn" : [ "ec2Public1SubnetNetworkAcl" ],
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Public1SubnetAZ2" },
          "NetworkAclId"                : { "Ref" : "ec2Public1SubnetNetworkAcl" }
      }
    },

    "ec2Private1SubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2Private1SubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "DependsOn" : [ "ec2Private1SubnetNetworkAcl" ],
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2Private1SubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2Private1SubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "DependsOn" : [ "ec2Private1SubnetNetworkAcl" ],
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2Private1SubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },

    "ec2Private1SubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn" : [ "ec2Private1SubnetNetworkAcl" ],
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Private1SubnetAZ1" },
          "NetworkAclId"                : { "Ref" : "ec2Private1SubnetNetworkAcl" }
      }
    },
    "ec2Private1SubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn" : [ "ec2Private1SubnetNetworkAcl" ],
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Private1SubnetAZ2" },
          "NetworkAclId"                : { "Ref" : "ec2Private1SubnetNetworkAcl" }
      }
    },

    "ec2IPAddressTest1" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : [ "ec2TestInstanceAZ1" ],
        "Properties" : {
          "Domain"                      : "vpc",
          "InstanceId"                  : { "Ref" : "ec2TestInstanceAZ1" }
        }
    },
    "ec2IPAddressNAT1" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : [ "ec2NATInstanceAZ1" ],
        "Properties" : {
          "Domain"                      : "vpc",
          "InstanceId"                  : { "Ref" : "ec2NATInstanceAZ1" }
        }
    },
    "ec2IPAddressNAT2" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : [ "ec2NATInstanceAZ2" ],
        "Properties" : {
          "Domain"                      : "vpc",
          "InstanceId"                  : { "Ref" : "ec2NATInstanceAZ2" }
        }
    },

    "ec2TestInstanceAZ1" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "ec2TestSecurityGroup" ],
        "Properties" : {
          "AvailabilityZone"            : { "Fn::GetAtt" : [ "ec2Public1SubnetAZ1", "AvailabilityZone" ] },
          "ImageId"                     : { "Fn::FindInMap" : [ "RegionLinuxAMI", { "Ref" : "AWS::Region" }, "PV" ] },
          "InstanceType"                : { "Ref" : "aTestInstanceType" },
          "Monitoring"                  : "false",
          "KeyName"                     : { "Ref" : "bUserKeys" },
          "SecurityGroupIds"            : [ { "Ref" : "ec2TestSecurityGroup" } ],
          "SubnetId"                    : { "Ref" : "ec2Public1SubnetAZ1" },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2NATInstanceAZ1" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "ec2NATSecurityGroup" ],
        "Properties" : {
          "AvailabilityZone"            : { "Fn::GetAtt" : [ "ec2Public1SubnetAZ1", "AvailabilityZone" ] },
          "ImageId"                     : { "Fn::FindInMap" : [ "RegionNATAMI", { "Ref" : "AWS::Region" }, "HVM" ] },
          "InstanceType"                : "c3.2xlarge",
          "Monitoring"                  : "true",
          "SourceDestCheck"             : "false",
          "DisableApiTermination"       : "true",
          "KeyName"                     : { "Ref" : "bUserKeys" },
          "SecurityGroupIds"            : [ { "Ref" : "ec2NATSecurityGroup" } ],
          "SubnetId"                    : { "Ref" : "ec2Public1SubnetAZ1" },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "ec2NATInstanceAZ2" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "ec2NATSecurityGroup" ],
        "Properties" : {
          "AvailabilityZone"            : { "Fn::GetAtt" : [ "ec2Public1SubnetAZ2", "AvailabilityZone" ] },
          "ImageId"                     : { "Fn::FindInMap" : [ "RegionNATAMI", { "Ref" : "AWS::Region" }, "HVM" ] },
          "InstanceType"                : "c3.2xlarge",
          "Monitoring"                  : "true",
          "SourceDestCheck"             : "false",
          "DisableApiTermination"       : "true",
          "KeyName"                     : { "Ref" : "bUserKeys" },
          "SecurityGroupIds"            : [ { "Ref" : "ec2NATSecurityGroup" } ],
          "SubnetId"                    : { "Ref" : "ec2Public1SubnetAZ2" },
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2TestSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription"            : "Security group for our test instance.",
          "VpcId"                       : {"Ref" : "ec2VPC"},
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ],
        "SecurityGroupIngress" : [
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "22",
          "ToPort"                      : "22",
          "CidrIp"                      : { "Ref": "cSSHFrom" }
          }
        ]
      }
    },
    "ec2NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription"            : "Security group for our NAT instances.",
          "VpcId"                       : {"Ref" : "ec2VPC"},
        "Tags": [
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ],
        "SecurityGroupIngress"  : [
          {
          "IpProtocol"                  : "-1",
          "CidrIp"                      : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] }
          }
        ]
      }
    },

    "ebApplication" : {
      "Type" : "AWS::ElasticBeanstalk::Application",
        "Properties" : {
          "Description"                 : "AWS Elastic Beanstalk Python Sample Application",
          "ApplicationVersions" : [
            {
            "VersionLabel"              : "Initial Version",
            "Description"               : "Version 1.0",
            "SourceBundle" : {
              "S3Bucket"                : { "Fn::Join" : ["-", ["elasticbeanstalk-samples", { "Ref" : "AWS::Region" } ] ] },
              "S3Key"                   : "python-sample.zip"
              }
            }
          ]
        }
    },

    "ebEnvironment" : {
      "Type" : "AWS::ElasticBeanstalk::Environment",
      "DependsOn" : [ "ebApplication", "ec2TestSecurityGroup" ],
        "Properties" : {
          "ApplicationName"             : { "Ref" : "ebApplication" },
          "Description"                 : "AWS Elastic Beanstalk Environment running Python Sample Application",
          "SolutionStackName"           : "64bit Amazon Linux running Python",
          "VersionLabel"                : "Initial Version",
          "OptionSettings" : [
            { "Namespace"  : "aws:ec2:vpc",
              "OptionName" : "VPCId", "Value" : { "Ref" : "ec2VPC" }
            },
            { "Namespace"  : "aws:ec2:vpc",
              "OptionName" : "ELBSubnets", "Value" : { "Fn::Join" : [ ",", [ { "Ref" : "ec2Public1SubnetAZ1" }, { "Ref" : "ec2Public1SubnetAZ2" } ] ] }
            },
            { "Namespace"  : "aws:ec2:vpc",
              "OptionName" : "Subnets", "Value" : { "Fn::Join" : [ ",", [ { "Ref" : "ec2Private1SubnetAZ1" }, { "Ref" : "ec2Private1SubnetAZ2" } ] ] }
            },
            { "Namespace"  : "aws:autoscaling:launchconfiguration",
              "OptionName" : "InstanceType", "Value" : { "Ref" : "dASGInstanceType" }
            },
            { "Namespace"  : "aws:autoscaling:launchconfiguration",
              "OptionName" : "EC2KeyName", "Value" : { "Ref" : "eUserKeys" }
            },
            { "Namespace"  : "aws:autoscaling:launchconfiguration",
              "OptionName" : "SSHSourceRestriction", "Value" : { "Fn::Join" : [ "", [ "tcp,22,22,", { "Ref" : "ec2TestSecurityGroup" } ] ] }
            },
            { "Namespace"  : "aws:autoscaling:asg",
              "OptionName" : "MaxSize", "Value" : { "Ref" : "fMaxSize" }
            },
            { "Namespace"  : "aws:autoscaling:asg",
              "OptionName" : "MinSize", "Value" : { "Ref" : "gMinSize" }
            },
            { "Namespace"  : "aws:autoscaling:asg",
              "OptionName" : "Cooldown", "Value" : "120"
            },
            { "Namespace"  : "aws:autoscaling:trigger",
              "OptionName" : "UpperBreachScaleIncrement", "Value" : { "Ref" : "hScalingAdjUp" }
            },
            { "Namespace"  : "aws:autoscaling:trigger",
              "OptionName" : "LowerBreachScaleIncrement", "Value" : { "Ref" : "iScalingAdjDn" }
            },
            { "Namespace"  : "aws:autoscaling:trigger",
              "OptionName" : "BreachDuration", "Value" : "2"
            },
            { "Namespace"  : "aws:autoscaling:trigger",
              "OptionName" : "UpperThreshold", "Value" : "2"
            },
            { "Namespace"  : "aws:autoscaling:trigger",
              "OptionName" : "LowerThreshold", "Value" : "1"
            },
            { "Namespace"  : "aws:autoscaling:trigger",
              "OptionName" : "MeasureName", "Value" : "HealthyHostCount"
            },
            { "Namespace"  : "aws:autoscaling:trigger",
              "OptionName" : "Statistic", "Value" : "Maximum"
            },
            { "Namespace"  : "aws:autoscaling:trigger",
              "OptionName" : "Unit", "Value" : "Count"
            },
            { "Namespace"  : "aws:elb:loadbalancer",
              "OptionName" : "CrossZone", "Value" : "true"
            },
            { "Namespace"  : "aws:elb:policies",
              "OptionName" : "ConnectionDrainingEnabled", "Value" : "true"
            },
            { "Namespace"  : "aws:elb:healthcheck",
              "OptionName" : "HealthyThreshold", "Value" : "2"
            },
            { "Namespace"  : "aws:elb:healthcheck",
              "OptionName" : "Interval", "Value" : "10"
            },
            { "Namespace"  : "aws:elb:healthcheck",
              "OptionName" : "UnhealthyThreshold", "Value" : "3"
            }
          ]
        }
    }
 },

  "Outputs" : {

    "VPCId" : {
      "Description"                     : "VPC Id",
      "Value"                           : { "Ref" : "ec2VPC" }
    },
    "AppURL" : {
      "Description"                     : "Elastic Beanstalk application URL",
      "Value"                           : { "Fn::Join" : [ "",
                                            [
                                               "http://", { "Fn::GetAtt" : ["ebEnvironment", "EndpointURL"] }
                                            ]
                                          ] }
    },
    "TestIPAZ1" : {
      "Description"                     : "Test Instance in AZ1 Public IP",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2TestInstanceAZ1" }, "is",
                                              { "Fn::GetAtt" : [ "ec2TestInstanceAZ1", "PublicIp" ] }
                                            ]
                                          ] }
    },
    "NatIPAZ1" : {
      "Description"                     : "NAT-AZ1 Public IP",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2NATInstanceAZ1" }, "is",
                                              { "Fn::GetAtt" : [ "ec2NATInstanceAZ1", "PublicIp" ] }
                                            ]
                                          ] }
    },
    "NatIPAZ2" : {
      "Description"                     : "NAT-AZ2 Public IP",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2NATInstanceAZ2" }, "is",
                                              { "Fn::GetAtt" : [ "ec2NATInstanceAZ2", "PublicIp" ] }
                                            ]
                                          ] }
    },
    "Pub1SubnetAZ1" : {
      "Description"                     : "Public Subnet Id for AZ1",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2Public1SubnetAZ1" }, "in",
                                              { "Fn::GetAtt" : [ "ec2Public1SubnetAZ1", "AvailabilityZone" ] }
                                            ]
                                          ] }
    },
    "Pub1SubnetAZ2" : {
      "Description"                     : "Public Subnet Id for AZ2",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2Public1SubnetAZ2" }, "in",
                                              { "Fn::GetAtt" : [ "ec2Public1SubnetAZ2", "AvailabilityZone" ] }
                                            ]
                                          ] }
    },
    "Pri1SubnetAZ1" : {
      "Description"                     : "Private Subnet Id for AZ1",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2Private1SubnetAZ1" }, "in",
                                              { "Fn::GetAtt" : [ "ec2Private1SubnetAZ1", "AvailabilityZone" ] }
                                            ]
                                          ] }
    },
    "Pri1SubnetAZ2" : {
      "Description"                     : "Private Subnet Id for AZ2",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2Private1SubnetAZ2" }, "in",
                                              { "Fn::GetAtt" : [ "ec2Private1SubnetAZ2", "AvailabilityZone" ] }
                                            ]
                                          ] }
    }
  }
}
