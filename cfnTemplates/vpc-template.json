{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description"	: "VPC Architecture template. Creates a VPC in 1-3 availability-zones, 1-6 subnets.",

  "Parameters" : {

    "01VPCCIDRBlock" : {
        "Type"				: "String",
        "Default"			: "10.79.0.0/22",
        "Description"			: "Enter your VPC IP CIDR block.",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x."
    },
    "02Public1SubnetAZ1" : {
        "Type"				: "String",
        "Default"			: "10.79.0.0/26",
        "Description"			: "Public subnet for availability zone-1.",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x."
    },
    "02Public1SubnetAZ2" : {
        "Type"				: "String",
        "Default"			: "10.79.0.64/26",
        "Description"			: "Public subnet for availability zone-2. (Enter 'na' if deploying into one AZ only.)",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|na",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x or 'na'."
    },
    "02Public1SubnetAZ3" : {
        "Type"				: "String",
        "Default"			: "na",
        "Description"			: "Public subnet for availability zone-3. (Enter 'na' if deploying into one or two AZs only.)",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|na",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x or 'na'."
    },
    "03Private1SubnetAZ1" : {
        "Type"				: "String",
        "Default"			: "10.79.1.0/24",
        "Description"			: "Private subnet for availability zone-1.",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|na",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x or 'na'."
    },
    "03Private1SubnetAZ2" : {
        "Type"				: "String",
        "Default"			: "10.79.2.0/24",
        "Description"			: "Private subnet for availability zone-2. (Enter 'na' if deploying into one AZ only.)",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|na",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x or 'na'."
    },
    "03Private1SubnetAZ3" : {
        "Type"				: "String",
        "Default"			: "na",
        "Description"			: "Private subnet for availability zone-3. (Enter 'na' if deploying into one or two AZs only.)",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|na",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x or 'na'."
    },
    "OwnerService" : {
        "Type"				: "String",
        "Default"			: "eng",
        "Description"			: "Owner or service name. (For tagging, use lowercase, no spaces, dashes ok.)",
        "AllowedPattern"		: "[-a-z0-9]*",
        "ConstraintDescription"		: "Must be lowercase, no spaces, dashes ok."
    },
    "StackEnv" : {
        "Type"				: "String",
        "Default"			: "stage",
        "Description"			: "Environment name; prod, stage, dev, etc. (For tagging, use lowercase, no spaces, dashes ok.)",
        "AllowedPattern"		: "[-a-z0-9]*",
        "ConstraintDescription"		: "Must be lowercase, no spaces, dashes ok."
    }
  },

  "Conditions" : {

    "Private1AZ1" : {
        "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "03Private1SubnetAZ1" }, "na" ] } ]
    },
    "Private1AZ2" : {
        "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "03Private1SubnetAZ2" }, "na" ] } ]
    },
    "Private1AZ3" : {
        "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "03Private1SubnetAZ3" }, "na" ] } ]
    },
    "Public1AZ2" : {
        "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "02Public1SubnetAZ2" }, "na" ] } ]
    },
    "Public1AZ3" : {
        "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "02Public1SubnetAZ3" }, "na" ] } ]
    }
  },

  "Mappings" : {

    "RegionMap" : {
        "us-east-1"			: { "AbbrRegion" : "ue1" },
        "eu-west-1"			: { "AbbrRegion" : "ew1" },
        "ap-northeast-1"		: { "AbbrRegion" : "an1" },
        "us-west-1"			: { "AbbrRegion" : "uw1" },
        "us-west-2"			: { "AbbrRegion" : "uw2" },
        "ap-southeast-1"		: { "AbbrRegion" : "as1" },
        "ap-southeast-2"		: { "AbbrRegion" : "as2" },
        "sa-east-1"			: { "AbbrRegion" : "se1" }
    }
  },

  "Resources" : {

    "ec2VPC" : {
      "Type" : "AWS::EC2::VPC",
        "Properties" : {
          "CidrBlock"			: { "Ref" : "01VPCCIDRBlock" },
          "EnableDnsSupport"		: "true",
          "EnableDnsHostnames"		: "true",
          "InstanceTenancy"		: "default",
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "vpc",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2InternetGW" : {
      "Type" : "AWS::EC2::InternetGateway",
        "Properties" : {
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "igw",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "InternetGatewayId"		: { "Ref" : "ec2InternetGW" }
      }
    },

    "ec2Public1SubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "02Public1SubnetAZ1" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "0", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "public-subnet1",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },
    "ec2Public1SubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
      "Condition" : "Public1AZ2",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "02Public1SubnetAZ2" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "1", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "public-subnet2",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },
    "ec2Public1SubnetAZ3" : {
      "Type" : "AWS::EC2::Subnet",
      "Condition" : "Public1AZ3",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "02Public1SubnetAZ3" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "2", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "public-subnet3",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2Private1SubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
      "Condition" : "Private1AZ1",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "03Private1SubnetAZ1" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "0", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "private-subnet1",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },
    "ec2Private1SubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
      "Condition" : "Private1AZ2",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "03Private1SubnetAZ2" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "1", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "private-subnet2",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },
    "ec2Private1SubnetAZ3" : {
      "Type" : "AWS::EC2::Subnet",
      "Condition" : "Private1AZ3",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "03Private1SubnetAZ3" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "2", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "private-subnet3",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2Public1RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "public-route-table",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2Private1RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "private-route-table",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2Pub1DefaultRoute" : {
      "Type" : "AWS::EC2::Route",
        "Properties" : {
          "RouteTableId"		: { "Ref" : "ec2Public1RouteTable" },
          "DestinationCidrBlock"	: "0.0.0.0/0",
          "GatewayId"			: { "Ref" : "ec2InternetGW" }
      }
    },

    "ec2Pri1DefaultRoute" : {
      "Type" : "AWS::EC2::Route",
        "Properties" : {
          "RouteTableId"		: { "Ref" : "ec2Private1RouteTable" },
          "DestinationCidrBlock"	: "0.0.0.0/0",
          "GatewayId"			: { "Ref" : "ec2InternetGW" }
      }
    },

    "ec2Public1SubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Public1SubnetAZ1" },
          "RouteTableId"		: { "Ref" : "ec2Public1RouteTable" }
      }
    },
    "ec2Public1SubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Condition" : "Public1AZ2",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Public1SubnetAZ2" },
          "RouteTableId"		: { "Ref" : "ec2Public1RouteTable" }
      }
    },
    "ec2Public1SubnetRouteTableAssocAZ3" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Condition" : "Public1AZ3",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Public1SubnetAZ3" },
          "RouteTableId"		: { "Ref" : "ec2Public1RouteTable" }
      }
    },

    "ec2Private1SubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Condition" : "Private1AZ1",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Private1SubnetAZ1" },
          "RouteTableId"		: { "Ref" : "ec2Private1RouteTable" }
      }
    },
    "ec2Private1SubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Condition" : "Private1AZ2",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Private1SubnetAZ2" },
          "RouteTableId"		: { "Ref" : "ec2Private1RouteTable" }
      }
    },
    "ec2Private1SubnetRouteTableAssocAZ3" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Condition" : "Private1AZ3",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Private1SubnetAZ3" },
          "RouteTableId"		: { "Ref" : "ec2Private1RouteTable" }
      }
    },

    "ec2Public1SubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "public-nacl",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2Public1SubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2Public1SubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },

    "ec2Public1SubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2Public1SubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },

    "ec2Public1SubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Public1SubnetAZ1" },
          "NetworkAclId"		: { "Ref" : "ec2Public1SubnetNetworkAcl" }
      }
    },
    "ec2Public1SubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition" : "Public1AZ2",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Public1SubnetAZ2" },
          "NetworkAclId"		: { "Ref" : "ec2Public1SubnetNetworkAcl" }
      }
    },
    "ec2Public1SubnetNetworkAclAssocAZ3" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition" : "Public1AZ3",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Public1SubnetAZ3" },
          "NetworkAclId"		: { "Ref" : "ec2Public1SubnetNetworkAcl" }
      }
    },

    "ec2Private1SubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Owner",
                "Value"			: { "Ref" : "OwnerService" }
            },
            {
                "Key"			: "Env",
                "Value"			: { "Ref" : "StackEnv" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "private-nacl",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AbbrRegion" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2Private1SubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2Private1SubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: { "Ref" : "01VPCCIDRBlock" }
        }
    },
    "ec2Private1SubnetAclEntryIn200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2Private1SubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "1024", "To" : "65535" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2Private1SubnetAclEntryIn300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2Private1SubnetNetworkAcl" },
          "RuleNumber"			: "300",
          "Protocol"			: "17",
          "PortRange"			: { "From" : "1024", "To" : "65535" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },

    "ec2Private1SubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2Private1SubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: { "Ref" : "01VPCCIDRBlock" }
        }
    },
    "ec2Private1SubnetAclEntryOut200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2Private1SubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "443", "To" : "443" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2Private1SubnetAclEntryOut300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2Private1SubnetNetworkAcl" },
          "RuleNumber"			: "300",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "80", "To" : "80" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },

    "ec2Private1SubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition" : "Private1AZ1",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Private1SubnetAZ1" },
          "NetworkAclId"		: { "Ref" : "ec2Private1SubnetNetworkAcl" }
      }
    },
    "ec2Private1SubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition" : "Private1AZ2",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Private1SubnetAZ2" },
          "NetworkAclId"		: { "Ref" : "ec2Private1SubnetNetworkAcl" }
      }
    },
    "ec2Private1SubnetNetworkAclAssocAZ3" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition" : "Private1AZ3",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2Private1SubnetAZ3" },
          "NetworkAclId"		: { "Ref" : "ec2Private1SubnetNetworkAcl" }
      }
    }
  },

  "Outputs" : {

    "VPCId" : {
      "Description"			: "VPC Id",
      "Value"				: { "Ref" : "ec2VPC" }
    },
    "Pub1SubnetAZ1" : {
      "Description"			: "Public Subnet Id for AZ1",
      "Value"				: {
						"Fn::Join" : [
						" ",
						  [
						    { "Ref" : "ec2Public1SubnetAZ1" },
						     "in",
						    { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] }
						  ]
						]
					}
    },
    "Pub1SubnetAZ2" : {
    "Condition" : "Public1AZ2",
      "Description"			: "Public Subnet Id for AZ2",
      "Value"				: {
						"Fn::Join" : [
						" ",
						  [
						    { "Ref" : "ec2Public1SubnetAZ2" },
						     "in",
						    { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] }
						  ]
						]
					}
    },
    "Pub1SubnetAZ3" : {
    "Condition" : "Public1AZ3",
      "Description"			: "Public Subnet Id for AZ3",
      "Value"				: {
						"Fn::Join" : [
						" ",
						  [
						    { "Ref" : "ec2Public1SubnetAZ3" },
						     "in",
						    { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] }
						  ]
						]
					}
    },
    "Pri1SubnetAZ1" : {
      "Condition" : "Private1AZ1",
      "Description"			: "Private Subnet Id for AZ1",
      "Value"				: {
						"Fn::Join" : [
						" ",
						  [
						    { "Ref" : "ec2Private1SubnetAZ1" },
						     "in",
						    { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] }
						  ]
						]
					}
    },
    "Pri1SubnetAZ2" : {
    "Condition" : "Private1AZ2",
      "Description"			: "Private Subnet Id for AZ2",
      "Value"				: {
						"Fn::Join" : [
						" ",
						  [
						    { "Ref" : "ec2Private1SubnetAZ2" },
						     "in",
						    { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] }
						  ]
						]
					}
    },
    "Pri1SubnetAZ3" : {
    "Condition" : "Private1AZ3",
      "Description"			: "Private Subnet Id for AZ3",
      "Value"				: {
						"Fn::Join" : [
						" ",
						  [
						    { "Ref" : "ec2Private1SubnetAZ3" },
						     "in",
						    { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] }
						  ]
						]
					}
    }
  }
}
